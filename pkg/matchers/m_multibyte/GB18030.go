package m_multibyte

type charDecoder_gb_18030 struct {
}

func (charDecoder_gb_18030) DecodeOneChar(input []byte) (c uint16, remain []byte, err error) {
	if len(input) == 0 {
		return 0, nil, errEOB
	}
	first := input[0]
	remain = input[1:]
	c = uint16(first)
	if first <= 0x80 {
		return
	}
	if len(remain) == 0 {
		return 0, nil, errEOB
	}
	second := remain[0]
	remain = remain[1:]
	c = c<<8 | uint16(second)
	if first >= 0x81 && first <= 0xFE {
		if (second >= 0x40 && second <= 0x7E) || (second >= 0x80 && second <= 0xFE) {
			return
		}

		if second >= 0x30 && second <= 0x39 {
			if len(remain) == 0 {
				return 0, nil, errEOB
			}
			third := remain[0]
			remain = remain[1:]
			if third >= 0x81 && third <= 0xFE {
				if len(remain) == 0 {
					return 0, nil, errEOB
				}
				fourth := remain[0]
				remain = remain[1:]
				if fourth >= 0x30 && fourth <= 0x39 {
					c = c<<16 | uint16(third)<<8 | uint16(fourth)
					return
				}
			}
		}
		err = errBadChar
	}
	return
}

var commonChars_gb_18030 = []uint16{
	0xa1a1, 0xa1a2, 0xa1a3, 0xa1a4, 0xa1b0, 0xa1b1, 0xa1f1, 0xa1f3, 0xa3a1, 0xa3ac,
	0xa3ba, 0xb1a8, 0xb1b8, 0xb1be, 0xb2bb, 0xb3c9, 0xb3f6, 0xb4f3, 0xb5bd, 0xb5c4,
	0xb5e3, 0xb6af, 0xb6d4, 0xb6e0, 0xb7a2, 0xb7a8, 0xb7bd, 0xb7d6, 0xb7dd, 0xb8b4,
	0xb8df, 0xb8f6, 0xb9ab, 0xb9c9, 0xb9d8, 0xb9fa, 0xb9fd, 0xbacd, 0xbba7, 0xbbd6,
	0xbbe1, 0xbbfa, 0xbcbc, 0xbcdb, 0xbcfe, 0xbdcc, 0xbecd, 0xbedd, 0xbfb4, 0xbfc6,
	0xbfc9, 0xc0b4, 0xc0ed, 0xc1cb, 0xc2db, 0xc3c7, 0xc4dc, 0xc4ea, 0xc5cc, 0xc6f7,
	0xc7f8, 0xc8ab, 0xc8cb, 0xc8d5, 0xc8e7, 0xc9cf, 0xc9fa, 0xcab1, 0xcab5, 0xcac7,
	0xcad0, 0xcad6, 0xcaf5, 0xcafd, 0xccec, 0xcdf8, 0xceaa, 0xcec4, 0xced2, 0xcee5,
	0xcfb5, 0xcfc2, 0xcfd6, 0xd0c2, 0xd0c5, 0xd0d0, 0xd0d4, 0xd1a7, 0xd2aa, 0xd2b2,
	0xd2b5, 0xd2bb, 0xd2d4, 0xd3c3, 0xd3d0, 0xd3fd, 0xd4c2, 0xd4da, 0xd5e2, 0xd6d0,
}

func Create_gb_18030_Matcher() *MultiByteMatcher {
	return &MultiByteMatcher{
		"GB-18030",
		"zh",
		charDecoder_gb_18030{},
		commonChars_gb_18030,
	}
}
