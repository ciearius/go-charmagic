package multibyte

type charDecoder_sjis struct {
}

func (charDecoder_sjis) DecodeOneChar(input []byte) (c uint16, remain []byte, err error) {
	if len(input) == 0 {
		return 0, nil, errEOB
	}
	first := input[0]
	c = uint16(first)
	remain = input[1:]
	if first <= 0x7F || (first > 0xA0 && first <= 0xDF) {
		return
	}
	if len(remain) == 0 {
		return c, remain, errBadChar
	}
	second := remain[0]
	remain = remain[1:]
	c = c<<8 | uint16(second)
	if (second >= 0x40 && second <= 0x7F) || (second >= 0x80 && second <= 0xFE) {
	} else {
		err = errBadChar
	}
	return
}

var commonChars_sjis = []uint16{
	0x8140, 0x8141, 0x8142, 0x8145, 0x815b, 0x8169, 0x816a, 0x8175, 0x8176, 0x82a0,
	0x82a2, 0x82a4, 0x82a9, 0x82aa, 0x82ab, 0x82ad, 0x82af, 0x82b1, 0x82b3, 0x82b5,
	0x82b7, 0x82bd, 0x82be, 0x82c1, 0x82c4, 0x82c5, 0x82c6, 0x82c8, 0x82c9, 0x82cc,
	0x82cd, 0x82dc, 0x82e0, 0x82e7, 0x82e8, 0x82e9, 0x82ea, 0x82f0, 0x82f1, 0x8341,
	0x8343, 0x834e, 0x834f, 0x8358, 0x835e, 0x8362, 0x8367, 0x8375, 0x8376, 0x8389,
	0x838a, 0x838b, 0x838d, 0x8393, 0x8e96, 0x93fa, 0x95aa,
}

func Create_sjis_Matcher() *MultiByteMatcher {
	return &MultiByteMatcher{
		"Shift_JIS",
		"ja",
		charDecoder_sjis{},
		commonChars_sjis,
	}
}
